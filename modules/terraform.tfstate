{
    "version": 3,
    "terraform_version": "0.11.7",
    "serial": 1,
    "lineage": "d9fcc827-67dc-033b-1300-e9d7b4737f60",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "root_account"
            ],
            "outputs": {},
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "testing_account"
            ],
            "outputs": {},
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "root_account",
                "dir-init"
            ],
            "outputs": {},
            "resources": {
                "null_resource.mkdir": {
                    "type": "null_resource",
                    "depends_on": [],
                    "primary": {
                        "id": "1984686945025360547",
                        "attributes": {
                            "id": "1984686945025360547",
                            "triggers.%": "1",
                            "triggers.dirs": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/root.test.co/conf /home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/root.test.co/rootfs"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null"
                },
                "null_resource.touch": {
                    "type": "null_resource",
                    "depends_on": [
                        "null_resource.mkdir"
                    ],
                    "primary": {
                        "id": "5238482148941597581",
                        "attributes": {
                            "id": "5238482148941597581",
                            "triggers.%": "1",
                            "triggers.files": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/root.test.co/conf/.gitignore /home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/root.test.co/rootfs/.gitignore"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "root_account",
                "docker_build"
            ],
            "outputs": {},
            "resources": {
                "null_resource.docker_build": {
                    "type": "null_resource",
                    "depends_on": [],
                    "primary": {
                        "id": "8654144587755421477",
                        "attributes": {
                            "id": "8654144587755421477"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "root_account",
                "render"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.data.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "b703de1053aaf624a85c78295733b37d43dd7d2225410ccaf6a0ff780f290061",
                        "attributes": {
                            "id": "b703de1053aaf624a85c78295733b37d43dd7d2225410ccaf6a0ff780f290061",
                            "rendered": "FROM cloudposse/terraform-root-modules:0.6.0 as terraform-root-modules\n\nFROM cloudposse/geodesic:0.45.0\n\nENV DOCKER_IMAGE=\"cloudposse/root.cloudposse.co\"\nENV DOCKER_TAG=\"latest\"\n\n# Geodesic banner\nENV BANNER=\"root.cloudposse.co\"\n\n# AWS Region\nENV AWS_REGION=\"us-west-2\"\nENV AWS_DEFAULT_REGION=\"${AWS_REGION}\"\nENV AWS_ACCOUNT_ID=\"323330167063\"\nENV AWS_ROOT_ACCOUNT_ID=\"${AWS_ACCOUNT_ID}\"\n\n# Terraform vars\nENV TF_VAR_region=\"${AWS_REGION}\"\nENV TF_VAR_account_id=\"${AWS_ACCOUNT_ID}\"\nENV TF_VAR_namespace=\"cpco\"\nENV TF_VAR_stage=\"root\"\n\nENV TF_VAR_parent_domain_name=\"cloudposse.co\"\nENV TF_VAR_root_domain_name=\"root.cloudposse.co\"\n\n# Terraform state bucket and DynamoDB table for state locking\nENV TF_BUCKET_REGION=\"${AWS_REGION}\"\nENV TF_BUCKET=\"${TF_VAR_namespace}-${TF_VAR_stage}-terraform-state\"\nENV TF_DYNAMODB_TABLE=\"${TF_VAR_namespace}-${TF_VAR_stage}-terraform-state-lock\"\n\n# Default AWS Profile name\nENV AWS_DEFAULT_PROFILE=\"${TF_VAR_namespace}-${TF_VAR_stage}-admin\"\n\n# chamber KMS config\nENV CHAMBER_KMS_KEY_ALIAS=\"alias/${TF_VAR_namespace}-${TF_VAR_stage}-chamber\"\n\n# Copy root modules\nCOPY --from=terraform-root-modules /aws/tfstate-backend/ /conf/tfstate-backend/\nCOPY --from=terraform-root-modules /aws/root-dns/ /conf/root-dns/\nCOPY --from=terraform-root-modules /aws/organization/ /conf/organization/\nCOPY --from=terraform-root-modules /aws/accounts/ /conf/accounts/\nCOPY --from=terraform-root-modules /aws/account-settings/ /conf/account-settings/\nCOPY --from=terraform-root-modules /aws/root-iam/ /conf/root-iam/\nCOPY --from=terraform-root-modules /aws/iam/ /conf/iam/\nCOPY --from=terraform-root-modules /aws/cloudtrail/ /conf/cloudtrail/\n\n# Place configuration in 'conf/' directory\nCOPY conf/ /conf/\n\n# Install configuration dependencies\nRUN make -C /conf install\n\n# Filesystem entry for tfstate\nRUN s3 fstab '${TF_BUCKET}' '/' '/secrets/tf'\n\nWORKDIR /conf/\n",
                            "template": "FROM cloudposse/terraform-root-modules:0.6.0 as terraform-root-modules\n\nFROM cloudposse/geodesic:0.45.0\n\nENV DOCKER_IMAGE=\"cloudposse/root.cloudposse.co\"\nENV DOCKER_TAG=\"latest\"\n\n# Geodesic banner\nENV BANNER=\"root.cloudposse.co\"\n\n# AWS Region\nENV AWS_REGION=\"us-west-2\"\nENV AWS_DEFAULT_REGION=\"$${AWS_REGION}\"\nENV AWS_ACCOUNT_ID=\"323330167063\"\nENV AWS_ROOT_ACCOUNT_ID=\"$${AWS_ACCOUNT_ID}\"\n\n# Terraform vars\nENV TF_VAR_region=\"$${AWS_REGION}\"\nENV TF_VAR_account_id=\"$${AWS_ACCOUNT_ID}\"\nENV TF_VAR_namespace=\"cpco\"\nENV TF_VAR_stage=\"root\"\n\nENV TF_VAR_parent_domain_name=\"cloudposse.co\"\nENV TF_VAR_root_domain_name=\"root.cloudposse.co\"\n\n# Terraform state bucket and DynamoDB table for state locking\nENV TF_BUCKET_REGION=\"$${AWS_REGION}\"\nENV TF_BUCKET=\"$${TF_VAR_namespace}-$${TF_VAR_stage}-terraform-state\"\nENV TF_DYNAMODB_TABLE=\"$${TF_VAR_namespace}-$${TF_VAR_stage}-terraform-state-lock\"\n\n# Default AWS Profile name\nENV AWS_DEFAULT_PROFILE=\"$${TF_VAR_namespace}-$${TF_VAR_stage}-admin\"\n\n# chamber KMS config\nENV CHAMBER_KMS_KEY_ALIAS=\"alias/$${TF_VAR_namespace}-$${TF_VAR_stage}-chamber\"\n\n# Copy root modules\nCOPY --from=terraform-root-modules /aws/tfstate-backend/ /conf/tfstate-backend/\nCOPY --from=terraform-root-modules /aws/root-dns/ /conf/root-dns/\nCOPY --from=terraform-root-modules /aws/organization/ /conf/organization/\nCOPY --from=terraform-root-modules /aws/accounts/ /conf/accounts/\nCOPY --from=terraform-root-modules /aws/account-settings/ /conf/account-settings/\nCOPY --from=terraform-root-modules /aws/root-iam/ /conf/root-iam/\nCOPY --from=terraform-root-modules /aws/iam/ /conf/iam/\nCOPY --from=terraform-root-modules /aws/cloudtrail/ /conf/cloudtrail/\n\n# Place configuration in 'conf/' directory\nCOPY conf/ /conf/\n\n# Install configuration dependencies\nRUN make -C /conf install\n\n# Filesystem entry for tfstate\nRUN s3 fstab '$${TF_BUCKET}' '/' '/secrets/tf'\n\nWORKDIR /conf/\n",
                            "vars.%": "1",
                            "vars.image_name": "root.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.data.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "0414ab5c5e1e9970c8d99097e81fa036f94e1428e6972c37797923efeadccb3e",
                        "attributes": {
                            "id": "0414ab5c5e1e9970c8d99097e81fa036f94e1428e6972c37797923efeadccb3e",
                            "rendered": "# Compiled files\n**/.terraform/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "template": "# Compiled files\n**/.terraform/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "vars.%": "1",
                            "vars.image_name": "root.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.data.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "17b450832fa0c56769ab72f997d00c66f705557176145801e0d6b740fd901f90",
                        "attributes": {
                            "id": "17b450832fa0c56769ab72f997d00c66f705557176145801e0d6b740fd901f90",
                            "rendered": ".git\n.gitignore\n.editorconfig\n\n# Compiled files\n**/.terraform/*\n**/.terragrunt-cache/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "template": ".git\n.gitignore\n.editorconfig\n\n# Compiled files\n**/.terraform/*\n**/.terragrunt-cache/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "vars.%": "1",
                            "vars.image_name": "root.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.data.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "110b449c227fe91dffba2baeb57bfb41d71b2b856d2b8aac954e719dd7bb1b3a",
                        "attributes": {
                            "id": "110b449c227fe91dffba2baeb57bfb41d71b2b856d2b8aac954e719dd7bb1b3a",
                            "rendered": "export CLUSTER ?= testing.cloudposse.co\nexport DOCKER_ORG ?= cloudposse\nexport DOCKER_IMAGE ?= $(DOCKER_ORG)/$(CLUSTER)\nexport DOCKER_TAG ?= latest\nexport DOCKER_IMAGE_NAME ?= $(DOCKER_IMAGE):$(DOCKER_TAG)\nexport DOCKER_BUILD_FLAGS =\nexport README_DEPS ?= docs/targets.md docs/terraform.md\nexport INSTALL_PATH ?= /usr/local/bin\n\n-include $(shell curl -sSL -o .build-harness \"https://git.io/build-harness\"; echo .build-harness)\n\n## Initialize build-harness, install deps, build docker container, install wrapper script and run shell\nall: init deps build install run\n\t@exit 0\n\n## Install dependencies (if any)\ndeps:\n\t@exit 0\n\n## Build docker image\nbuild:\n\t@make --no-print-directory docker/build\n\n## Push docker image to registry\npush:\n\tdocker push $(DOCKER_IMAGE)\n\n## Install wrapper script from geodesic container\ninstall:\n\t@docker run --rm $(DOCKER_IMAGE_NAME) | sudo -E bash -s $(DOCKER_TAG)\n\n## Start the geodesic shell by calling wrapper script\nrun:\n\t$(CLUSTER)\n",
                            "template": "export CLUSTER ?= testing.cloudposse.co\nexport DOCKER_ORG ?= cloudposse\nexport DOCKER_IMAGE ?= $(DOCKER_ORG)/$(CLUSTER)\nexport DOCKER_TAG ?= latest\nexport DOCKER_IMAGE_NAME ?= $(DOCKER_IMAGE):$(DOCKER_TAG)\nexport DOCKER_BUILD_FLAGS =\nexport README_DEPS ?= docs/targets.md docs/terraform.md\nexport INSTALL_PATH ?= /usr/local/bin\n\n-include $(shell curl -sSL -o .build-harness \"https://git.io/build-harness\"; echo .build-harness)\n\n## Initialize build-harness, install deps, build docker container, install wrapper script and run shell\nall: init deps build install run\n\t@exit 0\n\n## Install dependencies (if any)\ndeps:\n\t@exit 0\n\n## Build docker image\nbuild:\n\t@make --no-print-directory docker/build\n\n## Push docker image to registry\npush:\n\tdocker push $(DOCKER_IMAGE)\n\n## Install wrapper script from geodesic container\ninstall:\n\t@docker run --rm $(DOCKER_IMAGE_NAME) | sudo -E bash -s $(DOCKER_TAG)\n\n## Start the geodesic shell by calling wrapper script\nrun:\n\t$(CLUSTER)\n",
                            "vars.%": "1",
                            "vars.image_name": "root.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.data.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "bc4a4068bc714e544aedf175a80d5b3e5236efbe157b660e75a09063275226fc",
                        "attributes": {
                            "id": "bc4a4068bc714e544aedf175a80d5b3e5236efbe157b660e75a09063275226fc",
                            "rendered": "install:\n\tfind . -mindepth 2 -name Makefile -exec grep -l install: {} \\; | \\\n\t\txargs --no-run-if-empty -n 1 dirname | \\\n\t\txargs --no-run-if-empty -n 1 -I {} bash -c \"make -C {} install || exit 255\"\n",
                            "template": "install:\n\tfind . -mindepth 2 -name Makefile -exec grep -l install: {} \\; | \\\n\t\txargs --no-run-if-empty -n 1 dirname | \\\n\t\txargs --no-run-if-empty -n 1 -I {} bash -c \"make -C {} install || exit 255\"\n",
                            "vars.%": "1",
                            "vars.image_name": "root.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "local_file.data.0": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "33a3d335e1a7147bb4ec242f94f65b0add54ee0e",
                        "attributes": {
                            "content": "FROM cloudposse/terraform-root-modules:0.6.0 as terraform-root-modules\n\nFROM cloudposse/geodesic:0.45.0\n\nENV DOCKER_IMAGE=\"cloudposse/root.cloudposse.co\"\nENV DOCKER_TAG=\"latest\"\n\n# Geodesic banner\nENV BANNER=\"root.cloudposse.co\"\n\n# AWS Region\nENV AWS_REGION=\"us-west-2\"\nENV AWS_DEFAULT_REGION=\"${AWS_REGION}\"\nENV AWS_ACCOUNT_ID=\"323330167063\"\nENV AWS_ROOT_ACCOUNT_ID=\"${AWS_ACCOUNT_ID}\"\n\n# Terraform vars\nENV TF_VAR_region=\"${AWS_REGION}\"\nENV TF_VAR_account_id=\"${AWS_ACCOUNT_ID}\"\nENV TF_VAR_namespace=\"cpco\"\nENV TF_VAR_stage=\"root\"\n\nENV TF_VAR_parent_domain_name=\"cloudposse.co\"\nENV TF_VAR_root_domain_name=\"root.cloudposse.co\"\n\n# Terraform state bucket and DynamoDB table for state locking\nENV TF_BUCKET_REGION=\"${AWS_REGION}\"\nENV TF_BUCKET=\"${TF_VAR_namespace}-${TF_VAR_stage}-terraform-state\"\nENV TF_DYNAMODB_TABLE=\"${TF_VAR_namespace}-${TF_VAR_stage}-terraform-state-lock\"\n\n# Default AWS Profile name\nENV AWS_DEFAULT_PROFILE=\"${TF_VAR_namespace}-${TF_VAR_stage}-admin\"\n\n# chamber KMS config\nENV CHAMBER_KMS_KEY_ALIAS=\"alias/${TF_VAR_namespace}-${TF_VAR_stage}-chamber\"\n\n# Copy root modules\nCOPY --from=terraform-root-modules /aws/tfstate-backend/ /conf/tfstate-backend/\nCOPY --from=terraform-root-modules /aws/root-dns/ /conf/root-dns/\nCOPY --from=terraform-root-modules /aws/organization/ /conf/organization/\nCOPY --from=terraform-root-modules /aws/accounts/ /conf/accounts/\nCOPY --from=terraform-root-modules /aws/account-settings/ /conf/account-settings/\nCOPY --from=terraform-root-modules /aws/root-iam/ /conf/root-iam/\nCOPY --from=terraform-root-modules /aws/iam/ /conf/iam/\nCOPY --from=terraform-root-modules /aws/cloudtrail/ /conf/cloudtrail/\n\n# Place configuration in 'conf/' directory\nCOPY conf/ /conf/\n\n# Install configuration dependencies\nRUN make -C /conf install\n\n# Filesystem entry for tfstate\nRUN s3 fstab '${TF_BUCKET}' '/' '/secrets/tf'\n\nWORKDIR /conf/\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/root.test.co/Dockerfile",
                            "id": "33a3d335e1a7147bb4ec242f94f65b0add54ee0e"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.data.1": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "b5cb3e444e68a7213ced58cb103d1bc21bd2f326",
                        "attributes": {
                            "content": "# Compiled files\n**/.terraform/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/root.test.co/.gitignore",
                            "id": "b5cb3e444e68a7213ced58cb103d1bc21bd2f326"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.data.2": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "caf8109d2fd83f8b6320ecff91bd7c8a40530783",
                        "attributes": {
                            "content": ".git\n.gitignore\n.editorconfig\n\n# Compiled files\n**/.terraform/*\n**/.terragrunt-cache/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/root.test.co/.dockerignore",
                            "id": "caf8109d2fd83f8b6320ecff91bd7c8a40530783"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.data.3": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "f0bdb589fa6572cfddf6a2aaaaef5516ed39097d",
                        "attributes": {
                            "content": "export CLUSTER ?= testing.cloudposse.co\nexport DOCKER_ORG ?= cloudposse\nexport DOCKER_IMAGE ?= $(DOCKER_ORG)/$(CLUSTER)\nexport DOCKER_TAG ?= latest\nexport DOCKER_IMAGE_NAME ?= $(DOCKER_IMAGE):$(DOCKER_TAG)\nexport DOCKER_BUILD_FLAGS =\nexport README_DEPS ?= docs/targets.md docs/terraform.md\nexport INSTALL_PATH ?= /usr/local/bin\n\n-include $(shell curl -sSL -o .build-harness \"https://git.io/build-harness\"; echo .build-harness)\n\n## Initialize build-harness, install deps, build docker container, install wrapper script and run shell\nall: init deps build install run\n\t@exit 0\n\n## Install dependencies (if any)\ndeps:\n\t@exit 0\n\n## Build docker image\nbuild:\n\t@make --no-print-directory docker/build\n\n## Push docker image to registry\npush:\n\tdocker push $(DOCKER_IMAGE)\n\n## Install wrapper script from geodesic container\ninstall:\n\t@docker run --rm $(DOCKER_IMAGE_NAME) | sudo -E bash -s $(DOCKER_TAG)\n\n## Start the geodesic shell by calling wrapper script\nrun:\n\t$(CLUSTER)\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/root.test.co/Makefile",
                            "id": "f0bdb589fa6572cfddf6a2aaaaef5516ed39097d"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.data.4": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "fb0170423eb5675ff7be5bb044a9d2410c77db69",
                        "attributes": {
                            "content": "install:\n\tfind . -mindepth 2 -name Makefile -exec grep -l install: {} \\; | \\\n\t\txargs --no-run-if-empty -n 1 dirname | \\\n\t\txargs --no-run-if-empty -n 1 -I {} bash -c \"make -C {} install || exit 255\"\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/root.test.co/conf/Makefile",
                            "id": "fb0170423eb5675ff7be5bb044a9d2410c77db69"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "testing_account",
                "dir-init"
            ],
            "outputs": {},
            "resources": {
                "null_resource.mkdir": {
                    "type": "null_resource",
                    "depends_on": [],
                    "primary": {
                        "id": "6572945109695001555",
                        "attributes": {
                            "id": "6572945109695001555",
                            "triggers.%": "1",
                            "triggers.dirs": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/testing.test.co/conf /home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/testing.test.co/rootfs"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null"
                },
                "null_resource.touch": {
                    "type": "null_resource",
                    "depends_on": [
                        "null_resource.mkdir"
                    ],
                    "primary": {
                        "id": "545295237938572714",
                        "attributes": {
                            "id": "545295237938572714",
                            "triggers.%": "1",
                            "triggers.files": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/testing.test.co/conf/.gitignore /home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/testing.test.co/rootfs/.gitignore"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "testing_account",
                "docker_build"
            ],
            "outputs": {},
            "resources": {
                "null_resource.docker_build": {
                    "type": "null_resource",
                    "depends_on": [],
                    "primary": {
                        "id": "3660644790634009421",
                        "attributes": {
                            "id": "3660644790634009421"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "testing_account",
                "render"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.data.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "9346a272f47ab35f3fd8548a942cd37b66ace4343b21667b82da6d1215d3a8be",
                        "attributes": {
                            "id": "9346a272f47ab35f3fd8548a942cd37b66ace4343b21667b82da6d1215d3a8be",
                            "rendered": "FROM cloudposse/terraform-root-modules:0.5.7 as terraform-root-modules\n\nFROM cloudposse/geodesic:dev\n\nENV DOCKER_IMAGE=\"cloudposse/testing.cloudposse.co\"\nENV DOCKER_TAG=\"latest\"\n\n# Geodesic banner\nENV BANNER=\"testing\"\n\n# AWS Region\nENV AWS_REGION=\"us-west-2\"\n\n# Terraform vars\nENV TF_VAR_region=\"${AWS_REGION}\"\nENV TF_VAR_account_id=\"126450723953\"\nENV TF_VAR_namespace=\"cpco\"\nENV TF_VAR_stage=\"testing\"\nENV TF_VAR_domain_name=\"testing.cloudposse.co\"\nENV TF_VAR_zone_name=\"testing.cloudposse.co\"\nENV TF_VAR_zone_id=\"Z3SO0TKDDQ0RGG\"\n\n# chamber KMS config\nENV CHAMBER_KMS_KEY_ALIAS=\"alias/${TF_VAR_namespace}-${TF_VAR_stage}-chamber\"\n\n# Terraform State Bucket\nENV TF_BUCKET_REGION=\"${AWS_REGION}\"\nENV TF_BUCKET=\"${TF_VAR_namespace}-${TF_VAR_stage}-terraform-state\"\nENV TF_DYNAMODB_TABLE=\"${TF_VAR_namespace}-${TF_VAR_stage}-terraform-state-lock\"\n\n# Default AWS Profile name\nENV AWS_DEFAULT_PROFILE=\"${TF_VAR_namespace}-${TF_VAR_stage}-admin\"\nENV AWS_MFA_PROFILE=\"${TF_VAR_namespace}-root-admin\"\n\n# Copy root modules\nCOPY --from=terraform-root-modules /aws/tfstate-backend/ /conf/tfstate-backend/\nCOPY --from=terraform-root-modules /aws/account-dns/ /conf/account-dns/\nCOPY --from=terraform-root-modules /aws/chamber/ /conf/chamber/\n\n# Place configuration in 'conf/' directory\nCOPY conf/ /conf/\n\n# Install configuration dependencies\nRUN make -C /conf install\n\n# Filesystem entry for tfstate\nRUN s3 fstab '${TF_BUCKET}' '/' '/secrets/tf'\n\nCOPY rootfs/ /\n\n# Generate kops manifest\nRUN build-kops-manifest\n\nWORKDIR /conf/\n",
                            "template": "FROM cloudposse/terraform-root-modules:0.5.7 as terraform-root-modules\n\nFROM cloudposse/geodesic:dev\n\nENV DOCKER_IMAGE=\"cloudposse/testing.cloudposse.co\"\nENV DOCKER_TAG=\"latest\"\n\n# Geodesic banner\nENV BANNER=\"testing\"\n\n# AWS Region\nENV AWS_REGION=\"us-west-2\"\n\n# Terraform vars\nENV TF_VAR_region=\"$${AWS_REGION}\"\nENV TF_VAR_account_id=\"126450723953\"\nENV TF_VAR_namespace=\"cpco\"\nENV TF_VAR_stage=\"testing\"\nENV TF_VAR_domain_name=\"testing.cloudposse.co\"\nENV TF_VAR_zone_name=\"testing.cloudposse.co\"\nENV TF_VAR_zone_id=\"Z3SO0TKDDQ0RGG\"\n\n# chamber KMS config\nENV CHAMBER_KMS_KEY_ALIAS=\"alias/$${TF_VAR_namespace}-$${TF_VAR_stage}-chamber\"\n\n# Terraform State Bucket\nENV TF_BUCKET_REGION=\"$${AWS_REGION}\"\nENV TF_BUCKET=\"$${TF_VAR_namespace}-$${TF_VAR_stage}-terraform-state\"\nENV TF_DYNAMODB_TABLE=\"$${TF_VAR_namespace}-$${TF_VAR_stage}-terraform-state-lock\"\n\n# Default AWS Profile name\nENV AWS_DEFAULT_PROFILE=\"$${TF_VAR_namespace}-$${TF_VAR_stage}-admin\"\nENV AWS_MFA_PROFILE=\"$${TF_VAR_namespace}-root-admin\"\n\n# Copy root modules\nCOPY --from=terraform-root-modules /aws/tfstate-backend/ /conf/tfstate-backend/\nCOPY --from=terraform-root-modules /aws/account-dns/ /conf/account-dns/\nCOPY --from=terraform-root-modules /aws/chamber/ /conf/chamber/\n\n# Place configuration in 'conf/' directory\nCOPY conf/ /conf/\n\n# Install configuration dependencies\nRUN make -C /conf install\n\n# Filesystem entry for tfstate\nRUN s3 fstab '$${TF_BUCKET}' '/' '/secrets/tf'\n\nCOPY rootfs/ /\n\n# Generate kops manifest\nRUN build-kops-manifest\n\nWORKDIR /conf/\n",
                            "vars.%": "1",
                            "vars.image_name": "testing.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.data.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "0414ab5c5e1e9970c8d99097e81fa036f94e1428e6972c37797923efeadccb3e",
                        "attributes": {
                            "id": "0414ab5c5e1e9970c8d99097e81fa036f94e1428e6972c37797923efeadccb3e",
                            "rendered": "# Compiled files\n**/.terraform/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "template": "# Compiled files\n**/.terraform/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "vars.%": "1",
                            "vars.image_name": "testing.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.data.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "17b450832fa0c56769ab72f997d00c66f705557176145801e0d6b740fd901f90",
                        "attributes": {
                            "id": "17b450832fa0c56769ab72f997d00c66f705557176145801e0d6b740fd901f90",
                            "rendered": ".git\n.gitignore\n.editorconfig\n\n# Compiled files\n**/.terraform/*\n**/.terragrunt-cache/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "template": ".git\n.gitignore\n.editorconfig\n\n# Compiled files\n**/.terraform/*\n**/.terragrunt-cache/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "vars.%": "1",
                            "vars.image_name": "testing.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.data.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "110b449c227fe91dffba2baeb57bfb41d71b2b856d2b8aac954e719dd7bb1b3a",
                        "attributes": {
                            "id": "110b449c227fe91dffba2baeb57bfb41d71b2b856d2b8aac954e719dd7bb1b3a",
                            "rendered": "export CLUSTER ?= testing.cloudposse.co\nexport DOCKER_ORG ?= cloudposse\nexport DOCKER_IMAGE ?= $(DOCKER_ORG)/$(CLUSTER)\nexport DOCKER_TAG ?= latest\nexport DOCKER_IMAGE_NAME ?= $(DOCKER_IMAGE):$(DOCKER_TAG)\nexport DOCKER_BUILD_FLAGS =\nexport README_DEPS ?= docs/targets.md docs/terraform.md\nexport INSTALL_PATH ?= /usr/local/bin\n\n-include $(shell curl -sSL -o .build-harness \"https://git.io/build-harness\"; echo .build-harness)\n\n## Initialize build-harness, install deps, build docker container, install wrapper script and run shell\nall: init deps build install run\n\t@exit 0\n\n## Install dependencies (if any)\ndeps:\n\t@exit 0\n\n## Build docker image\nbuild:\n\t@make --no-print-directory docker/build\n\n## Push docker image to registry\npush:\n\tdocker push $(DOCKER_IMAGE)\n\n## Install wrapper script from geodesic container\ninstall:\n\t@docker run --rm $(DOCKER_IMAGE_NAME) | sudo -E bash -s $(DOCKER_TAG)\n\n## Start the geodesic shell by calling wrapper script\nrun:\n\t$(CLUSTER)\n",
                            "template": "export CLUSTER ?= testing.cloudposse.co\nexport DOCKER_ORG ?= cloudposse\nexport DOCKER_IMAGE ?= $(DOCKER_ORG)/$(CLUSTER)\nexport DOCKER_TAG ?= latest\nexport DOCKER_IMAGE_NAME ?= $(DOCKER_IMAGE):$(DOCKER_TAG)\nexport DOCKER_BUILD_FLAGS =\nexport README_DEPS ?= docs/targets.md docs/terraform.md\nexport INSTALL_PATH ?= /usr/local/bin\n\n-include $(shell curl -sSL -o .build-harness \"https://git.io/build-harness\"; echo .build-harness)\n\n## Initialize build-harness, install deps, build docker container, install wrapper script and run shell\nall: init deps build install run\n\t@exit 0\n\n## Install dependencies (if any)\ndeps:\n\t@exit 0\n\n## Build docker image\nbuild:\n\t@make --no-print-directory docker/build\n\n## Push docker image to registry\npush:\n\tdocker push $(DOCKER_IMAGE)\n\n## Install wrapper script from geodesic container\ninstall:\n\t@docker run --rm $(DOCKER_IMAGE_NAME) | sudo -E bash -s $(DOCKER_TAG)\n\n## Start the geodesic shell by calling wrapper script\nrun:\n\t$(CLUSTER)\n",
                            "vars.%": "1",
                            "vars.image_name": "testing.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.data.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "bc4a4068bc714e544aedf175a80d5b3e5236efbe157b660e75a09063275226fc",
                        "attributes": {
                            "id": "bc4a4068bc714e544aedf175a80d5b3e5236efbe157b660e75a09063275226fc",
                            "rendered": "install:\n\tfind . -mindepth 2 -name Makefile -exec grep -l install: {} \\; | \\\n\t\txargs --no-run-if-empty -n 1 dirname | \\\n\t\txargs --no-run-if-empty -n 1 -I {} bash -c \"make -C {} install || exit 255\"\n",
                            "template": "install:\n\tfind . -mindepth 2 -name Makefile -exec grep -l install: {} \\; | \\\n\t\txargs --no-run-if-empty -n 1 dirname | \\\n\t\txargs --no-run-if-empty -n 1 -I {} bash -c \"make -C {} install || exit 255\"\n",
                            "vars.%": "1",
                            "vars.image_name": "testing.test.co"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "local_file.data.0": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "29813c17d404e5a154d5be8d7ff04c952889d80f",
                        "attributes": {
                            "content": "FROM cloudposse/terraform-root-modules:0.5.7 as terraform-root-modules\n\nFROM cloudposse/geodesic:dev\n\nENV DOCKER_IMAGE=\"cloudposse/testing.cloudposse.co\"\nENV DOCKER_TAG=\"latest\"\n\n# Geodesic banner\nENV BANNER=\"testing\"\n\n# AWS Region\nENV AWS_REGION=\"us-west-2\"\n\n# Terraform vars\nENV TF_VAR_region=\"${AWS_REGION}\"\nENV TF_VAR_account_id=\"126450723953\"\nENV TF_VAR_namespace=\"cpco\"\nENV TF_VAR_stage=\"testing\"\nENV TF_VAR_domain_name=\"testing.cloudposse.co\"\nENV TF_VAR_zone_name=\"testing.cloudposse.co\"\nENV TF_VAR_zone_id=\"Z3SO0TKDDQ0RGG\"\n\n# chamber KMS config\nENV CHAMBER_KMS_KEY_ALIAS=\"alias/${TF_VAR_namespace}-${TF_VAR_stage}-chamber\"\n\n# Terraform State Bucket\nENV TF_BUCKET_REGION=\"${AWS_REGION}\"\nENV TF_BUCKET=\"${TF_VAR_namespace}-${TF_VAR_stage}-terraform-state\"\nENV TF_DYNAMODB_TABLE=\"${TF_VAR_namespace}-${TF_VAR_stage}-terraform-state-lock\"\n\n# Default AWS Profile name\nENV AWS_DEFAULT_PROFILE=\"${TF_VAR_namespace}-${TF_VAR_stage}-admin\"\nENV AWS_MFA_PROFILE=\"${TF_VAR_namespace}-root-admin\"\n\n# Copy root modules\nCOPY --from=terraform-root-modules /aws/tfstate-backend/ /conf/tfstate-backend/\nCOPY --from=terraform-root-modules /aws/account-dns/ /conf/account-dns/\nCOPY --from=terraform-root-modules /aws/chamber/ /conf/chamber/\n\n# Place configuration in 'conf/' directory\nCOPY conf/ /conf/\n\n# Install configuration dependencies\nRUN make -C /conf install\n\n# Filesystem entry for tfstate\nRUN s3 fstab '${TF_BUCKET}' '/' '/secrets/tf'\n\nCOPY rootfs/ /\n\n# Generate kops manifest\nRUN build-kops-manifest\n\nWORKDIR /conf/\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/testing.test.co/Dockerfile",
                            "id": "29813c17d404e5a154d5be8d7ff04c952889d80f"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.data.1": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "b5cb3e444e68a7213ced58cb103d1bc21bd2f326",
                        "attributes": {
                            "content": "# Compiled files\n**/.terraform/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/testing.test.co/.gitignore",
                            "id": "b5cb3e444e68a7213ced58cb103d1bc21bd2f326"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.data.2": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "caf8109d2fd83f8b6320ecff91bd7c8a40530783",
                        "attributes": {
                            "content": ".git\n.gitignore\n.editorconfig\n\n# Compiled files\n**/.terraform/*\n**/.terragrunt-cache/*\n*.tfstate\n*.tfstate.*\n*.tfvars\n\n# Module directory\n.terraform\n**/.idea\n**/*.iml\n\n**/.build-harness\n**/build-harness\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/testing.test.co/.dockerignore",
                            "id": "caf8109d2fd83f8b6320ecff91bd7c8a40530783"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.data.3": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "f0bdb589fa6572cfddf6a2aaaaef5516ed39097d",
                        "attributes": {
                            "content": "export CLUSTER ?= testing.cloudposse.co\nexport DOCKER_ORG ?= cloudposse\nexport DOCKER_IMAGE ?= $(DOCKER_ORG)/$(CLUSTER)\nexport DOCKER_TAG ?= latest\nexport DOCKER_IMAGE_NAME ?= $(DOCKER_IMAGE):$(DOCKER_TAG)\nexport DOCKER_BUILD_FLAGS =\nexport README_DEPS ?= docs/targets.md docs/terraform.md\nexport INSTALL_PATH ?= /usr/local/bin\n\n-include $(shell curl -sSL -o .build-harness \"https://git.io/build-harness\"; echo .build-harness)\n\n## Initialize build-harness, install deps, build docker container, install wrapper script and run shell\nall: init deps build install run\n\t@exit 0\n\n## Install dependencies (if any)\ndeps:\n\t@exit 0\n\n## Build docker image\nbuild:\n\t@make --no-print-directory docker/build\n\n## Push docker image to registry\npush:\n\tdocker push $(DOCKER_IMAGE)\n\n## Install wrapper script from geodesic container\ninstall:\n\t@docker run --rm $(DOCKER_IMAGE_NAME) | sudo -E bash -s $(DOCKER_TAG)\n\n## Start the geodesic shell by calling wrapper script\nrun:\n\t$(CLUSTER)\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/testing.test.co/Makefile",
                            "id": "f0bdb589fa6572cfddf6a2aaaaef5516ed39097d"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.data.4": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.data.*"
                    ],
                    "primary": {
                        "id": "fb0170423eb5675ff7be5bb044a9d2410c77db69",
                        "attributes": {
                            "content": "install:\n\tfind . -mindepth 2 -name Makefile -exec grep -l install: {} \\; | \\\n\t\txargs --no-run-if-empty -n 1 dirname | \\\n\t\txargs --no-run-if-empty -n 1 -I {} bash -c \"make -C {} install || exit 255\"\n",
                            "filename": "/home/erik.osterman/Dev/cloudposse/reference-architectures/modules/../repos/testing.test.co/conf/Makefile",
                            "id": "fb0170423eb5675ff7be5bb044a9d2410c77db69"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                }
            },
            "depends_on": []
        }
    ]
}
