apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: {{ getenv "KOPS_CLUSTER_NAME" }}
spec:
  additionalPolicies:
    master: |
      [
        {
           "Effect": "Allow",
            "Action": [
               "ec2:DescribeTags"
             ],
              "Resource": "*"
        }
      ]
    bastion: |
      [
        {
           "Effect": "Allow",
            "Action": [
               "ec2:DescribeTags"
             ],
              "Resource": "*"
        }
      ]
    node: |
      [
        {
           "Effect": "Allow",
           "Action": [
               "ec2:DescribeTags"
           ],
           "Resource": "*"
        }
      ]
  api:
    loadBalancer:
      ## Public or Internal https://github.com/kubernetes/kops/blob/master/docs/topology.md#aws
      type: {{ getenv "KOPS_API_LOAD_BALANCER_TYPE" "Public" }}
      idleTimeoutSeconds: {{ getenv "KOPS_API_LOAD_BALANCER_IDLE_TIMEOUT_SECONDS" "600" }}
  kubeAPIServer:
  {{- if bool (getenv "KOPS_AUTHORIZATION_RBAC_ENABLED" "false") }}
    anonymousAuth: false
    authorizationMode: {{ getenv "KOPS_KUBE_API_SERVER_AUTHORIZATION_MODE" "RBAC" }}
  {{- end }}
  {{- if bool (getenv "KOPS_ADMISSION_CONTROL_ENABLED" "true") }}
    admissionControl:
    # Below are the officially recommended admission controllers for k8s 1.10-1.12
    - NamespaceLifecycle
    - LimitRanger
    - ServiceAccount
    - DefaultStorageClass
    - DefaultTolerationSeconds
    - MutatingAdmissionWebhook
    - ValidatingAdmissionWebhook
    - ResourceQuota
    # Starting with k8s 1.13, Priority is also recommended
    - Priority
    # Starting wtih 1.14, these additional controllers are recommended
    - TaintNodesByCondition
    - PersistentVolumeClaimResize

    # These controllers are optional security enhancements
    # NodeRestriction works with Node and RBAC authorizers to limit what kubelet can modify
    # See https://kubernetes.io/docs/tasks/administer-cluster/securing-a-cluster/#api-authorization
    - NodeRestriction
      # DenyEscalatingExec: deny exec and attach commands to pods that run with escalated privileges that allow host access.
    - DenyEscalatingExec

    # These are just optional
    # DefaultTolerationSeconds sets the default forgiveness toleration for pods to tolerate
    # the taints notready:NoExecute and unreachable:NoExecute to 5 minutes
    - DefaultTolerationSeconds
    
    # The Initializers controller was an alpha feature of k8s 1.12 and 1.13 that did not pan out.
    # Removed in Kubernetes 1.14 https://github.com/kubernetes/kubernetes/pull/72972
    # - Initializers
  {{- end }}
  {{- if getenv "KOPS_OIDC_ISSUER_URL" }}
    oidcClientID: "{{ getenv "KOPS_OIDC_CLIENT_ID" "kubernetes"}}"
    oidcGroupsClaim: "{{ getenv "KOPS_OIDC_GROUPS_CLAIM" "groups" }}"
    oidcGroupsPrefix: "{{ getenv "KOPS_OIDC_GROUPS_PREFIX" "oidc:"}}"
    oidcIssuerURL: "{{ getenv "KOPS_OIDC_ISSUER_URL" }}"
    oidcUsernameClaim: "{{ getenv "KOPS_OIDC_USERNAME_CLAIM" "email" }}"
  {{- end }}
  {{- if bool (getenv "KOPS_AWS_IAM_AUTHENTICATOR_ENABLED" "false") }}
  authentication:
    aws: {}
  {{- end }}
  authorization:
    {{- if bool (getenv "KOPS_AUTHORIZATION_RBAC_ENABLED" "false") }}
    rbac: {}
    {{- else }}
    alwaysAllow: {}
    {{- end }}
  channel: stable
  cloudLabels:
    Cluster: {{ getenv "KOPS_CLUSTER_NAME" }}
  cloudProvider: aws
  configBase: {{ getenv "KOPS_STATE_STORE" }}/{{ getenv "KOPS_CLUSTER_NAME" }}
  {{- if getenv "KOPS_DNS_ZONE" }}
  dnsZone: {{ getenv "KOPS_DNS_ZONE" }}
  {{- else }}
  dnsZone: {{ getenv "KOPS_CLUSTER_NAME" | regexp.Replace "^[^.]+\\." "" }}
  {{- end }}
  etcdClusters:
  - etcdMembers:
    {{- range (getenv "KOPS_AVAILABILITY_ZONES" | strings.Split ",") }}
    - encryptedVolume: true
      instanceGroup: master-{{.}}
      name: {{ . | regexp.Replace "^.*[0-9]" "" }}
    {{- end }}
    name: main
  - etcdMembers:
    {{- range (getenv "KOPS_AVAILABILITY_ZONES" | strings.Split ",") }}
    - encryptedVolume: true
      instanceGroup: master-{{.}}
      name: {{ . | regexp.Replace "^.*[0-9]" "" }}
    {{- end }}
    name: events
  hooks:
  # Mitigate CVE-2019-5736
  - before:
    - docker.service
    manifest: |
      Type=oneshot
      ExecStart=/usr/bin/chattr +i /usr/bin/docker-runc
    name: cve-2019-5736.service
  # Mitigate https://github.com/kubernetes/kops/issues/5405
  - name: resize-nvme-rootfs
    roles: [Node, Master,]
    manifest: |
      Type=oneshot
      ExecStart=/bin/sh -c 'test -b /dev/nvme0n1p1 && growpart-workaround /dev/nvme0n1 1 && resize2fs /dev/nvme0n1p1 || true'
{{- if bool (getenv "KIAM_INSTALLED" "true") }}
  # Install iptable entry for kiam which, when kiam is not present, will prevent any access to EC2 metadata
  # NOTE: the interface name (after -i) must be the same as the interface name passed to kiam
  #       and if kiam is not listening on the default 8181 port, you must replace 8181 with the correct port number
  - name: kiam-iptables.service
    manifest: |
      [Unit]
      Description=Install iptables rule to divert all credential requests to kiam
      Wants=network-online.target
      After=network-online.target
      Before=docker.service

      [Service]
      Type=oneshot
      ExecStart=/bin/sh -c '/sbin/iptables -t nat -A PREROUTING -d 169.254.169.254/32 \
        -i cali+ -p tcp -m tcp --dport 80 -j DNAT \
        --to-destination $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4):8181'
      RemainAfterExit=yes

    useRawManifest: true
    roles: [Node]
{{- end }}
{{- if getenv "TELEPORT_PROXY_DOMAIN_NAME" }}
  - name: teleport-node.service
    roles: [Node, Master, Bastion]
    requires: [network.target, teleport-node-install.service]
    after: [network.target]
    manifest: |
      Type=simple
      Restart=always
      ExecStart=/bin/bash -c '/usr/local/bin/teleport start --config=/etc/teleport.yaml \
      --pid-file=/var/run/teleport.pid \
      --auth-server="{{- print (getenv "TELEPORT_AUTH_DOMAIN_NAME" | default (print "auth." (getenv "TELEPORT_PROXY_DOMAIN_NAME"))) ":3025" -}}" \
      --advertise-ip="$(curl -sS http://169.254.169.254/latest/meta-data/local-ipv4)" \
      --labels "id=$(curl -sS http://169.254.169.254/latest/meta-data/instance-id),role=$(/bin/sh /usr/local/bin/k8s-role-label.sh)"'
      ExecReload=/bin/kill -HUP $MAINPID
      PIDFile=/var/run/teleport.pid
  - name: teleport-node-install.service
    roles: [Node, Master, Bastion]
    before: [teleport-node.service]
    requires: [network.target]
    after: [network.target]
    manifest: |
      Type=oneshot
      ExecStart=/bin/bash -c 'set -e -o pipefail && \
      wget -q -t 3 -O /tmp/teleport.tar.gz \
      https://get.gravitational.com/teleport-ent-v{{- getenv "TELEPORT_VERSION" -}}-linux-amd64-bin.tar.gz && \
      tar  -xzf /tmp/teleport.tar.gz -C /tmp && \
      cp -f /tmp/teleport-ent/teleport /usr/local/bin/teleport && \
      chmod 551 /usr/local/bin/teleport'
  fileAssets:
    - name: teleport.yaml
      # path is actually the path plus the filename
      path: /etc/teleport.yaml
      roles: [Node, Master, Bastion]
      content: |
        teleport:
          auth_token: {{ getenv "TELEPORT_NODE_TOKEN" | default "node-not-completely-secure-but-not-a-huge-risk" }}
          log:
            output: stdout
            severity: INFO
        ssh_service:
          enabled: true
        auth_service:
          enabled: false
        proxy_service:
          enabled: false
    - name: k8s-role-label.sh
      # path is actually the path plus the filename
      path: /usr/local/bin/k8s-role-label.sh
      roles: [Node, Master, Bastion]
      content: |
        #!/bin/sh
        aws ec2 describe-tags \
          --filters "Name=resource-id,Values=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)" \
          --region $(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \
                     | grep region | cut -d\" -f4) \
          --query 'Tags[*].{tag:Key,value:Value}' \
          --output text | sed 's/\t/=/' | grep k8s.io/role | sed 's%k8s.io/role/%%' | cut -f1 -d=
{{- end }}
  kubeDNS:
    provider: CoreDNS
  kubelet:
    {{- if bool (getenv "KOPS_AUTHORIZATION_RBAC_ENABLED" "false") }}
    anonymousAuth: false
    {{- end }}
    {{- if bool (getenv "KOPS_KUBELET_AUTHENTICATION_TOKEN_WEBHOOK_ENABLED" "false") }}    
    authenticationTokenWebhook: true
    {{- end }}
    {{- if getenv "KOPS_CPU_CFS_QUOTA_PERIOD" }}
    # cpuCFSQuotaPeriod sets CPU CFS quota period value.
    # Defaults to Linux kernel default, which is 100ms.
    # Default is recommended for kernel with correctly functioning CFS scheduler,
    # but as of 2019-08-15 there were still known bugs waiting to be patched.
    # Recommended value until Linux Kernel is patched: 5ms - 20ms.
    # Format is golang Duration, e.g. "10ms".
    # See https://github.com/kubernetes/kubernetes/pull/63437 for discussion
    # of cpuCFSQuotaPeriod and cpuCFSQuota and references to more information.
    # See https://github.com/kubernetes/kubernetes/issues/67577#issuecomment-519527965
    # to begin your search for current kernel patch status.
    cpuCFSQuotaPeriod: {{ getenv "KOPS_CPU_CFS_QUOTA_PERIOD" }}
    {{- end }}
    {{- if eq (getenv "KOPS_CPU_CFS_QUOTA_ENABLED" | default "true") "false" }}
    # cpuCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.
    # It is not recommended to set this to false. Bugs in CFS scheduling are better
    # mitigated by setting cpuCFSQuotaPeriod to something in the range of 5ms to 20ms.
    # Workloads that do not want CPU throttling can opt out by not specifying CPU limits.
    cpuCFSQuota: false
    {{- end }}
  kubeProxy:
    metricsBindAddress: 0.0.0.0
  kubernetesApiAccess:
  {{- range (getenv "KOPS_KUBERNETES_API_ACCESS" | default "0.0.0.0/0" | strings.Split ",") }}
  - {{ . }}
  {{- end }}
  kubernetesVersion: {{ getenv "KUBERNETES_VERSION" }}
  masterPublicName: api.{{ getenv "KOPS_CLUSTER_NAME" }}
  networkCIDR: {{ getenv "KOPS_NETWORK_CIDR" "172.20.0.0/16" }}
  {{- if getenv "KOPS_SHARED_VPC_ID" }}
  networkID: {{ getenv "KOPS_SHARED_VPC_ID" }}
  {{- end }}
  networking:
    calico: {}
  nonMasqueradeCIDR: {{ getenv "KOPS_NON_MASQUERADE_CIDR" "100.64.0.0/10" }}
  sshAccess:
{{- if bool (getenv "KOPS_SSH_ACCESS_ENABLED" "true") }}
  - {{ getenv "KOPS_SSH_ACCESS_CIDR" "0.0.0.0/0" }}
{{- end }}
  subnets:
  {{- range $index, $value := (getenv "KOPS_AVAILABILITY_ZONES" | strings.Split ",") }}
  {{- $privateSubnets := getenv "KOPS_PRIVATE_SUBNETS" | required "KOPS_PRIVATE_SUBNETS must be defined" }}
  {{- $privateSubnetIDs := getenv "KOPS_SHARED_PRIVATE_SUBNET_IDS" }}
  {{- $natGateways := getenv "KOPS_SHARED_NAT_GATEWAYS" }}
  {{- $subnet := strings.Split "," $privateSubnets }}
  {{- $subnetID := strings.Split "," $privateSubnetIDs }}
  {{- $nat := strings.Split "," $natGateways }}
  - cidr: {{ index $subnet $index }}
    {{- if $privateSubnetIDs }}
    id: {{ index $subnetID $index }}
    {{- end }}
    name: {{ $value }}
    {{- if $natGateways }}
    egress: {{ index $nat $index }}
    {{- end }}
    type: Private
    zone: {{ $value }}
  {{- end }}
  {{- range $index, $value := (getenv "KOPS_AVAILABILITY_ZONES" | strings.Split ",") }}
  {{- $utilitySubnets := getenv "KOPS_UTILITY_SUBNETS" }}
  {{- $utilitySubnetIDs := getenv "KOPS_SHARED_UTILITY_SUBNET_IDS" }}
  {{- $subnet := strings.Split "," $utilitySubnets }}
  {{- $subnetID := strings.Split "," $utilitySubnetIDs }}
  - cidr: {{ index $subnet $index }}
    {{- if $utilitySubnetIDs }}
    id: {{ index $subnetID $index }}
    {{- end }}
    name: utility-{{ $value }}
    type: Utility
    zone: {{ $value }}
  {{- end }}
  topology:
    bastion:
      bastionPublicName: {{ getenv "KOPS_BASTION_PUBLIC_NAME" }}.{{ getenv "KOPS_CLUSTER_NAME" }}
    dns:
      type: Public
    masters: private
    nodes: private

---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ getenv "KOPS_CLUSTER_NAME" }}
  name: bastions
spec:
  image: {{ getenv "KOPS_BASE_IMAGE" }}
  machineType: {{ getenv "BASTION_MACHINE_TYPE" }}
  maxSize: 1
  minSize: 1
  role: Bastion
  subnets:
  {{- range (getenv "KOPS_AVAILABILITY_ZONES" | strings.Split ",") }}
  - utility-{{ . }}
  {{- end }}

{{ range (getenv "KOPS_MASTERS_AVAILABILITY_ZONES" ( getenv "KOPS_AVAILABILITY_ZONES" ) | strings.Split ",") }}

---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ getenv "KOPS_CLUSTER_NAME" }}
  name: master-{{ . }}
spec:
  detailedInstanceMonitoring: {{ getenv "KOPS_CLOUDWATCH_DETAILED_MONITORING" "false" }}
  associatePublicIp: false
  image: {{ getenv "KOPS_BASE_IMAGE" }}
  machineType: {{ getenv "MASTER_MACHINE_TYPE" }}
  maxSize: 1
  minSize: 1
  role: Master
  subnets:
  - {{ . }}
{{- end }}

{{- if getenv "NODE_MAX_SIZE_PER_AZ" }}
{{ range (getenv "KOPS_NODES_AVAILABILITY_ZONES" ( getenv "KOPS_AVAILABILITY_ZONES" ) | strings.Split ",") }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ getenv "KOPS_CLUSTER_NAME" }}
  name: nodes-{{ . }}
spec:
  detailedInstanceMonitoring: {{ getenv "KOPS_CLOUDWATCH_DETAILED_MONITORING" "false" }}
  associatePublicIp: false
  {{- if bool (getenv "KOPS_CLUSTER_AUTOSCALER_ENABLED" "false") }}
  cloudLabels:
    k8s.io/cluster-autoscaler/enabled: "true"
    k8s.io/cluster-autoscaler/{{ getenv "KOPS_CLUSTER_NAME" }}: "owned"
  {{- end }}
  nodeLabels:
    instanceGroup: nodes-{{ . }}
  image: {{ getenv "KOPS_BASE_IMAGE" }}
  machineType: {{ getenv "NODE_MACHINE_TYPE" }}
  maxSize: {{ getenv "NODE_MAX_SIZE_PER_AZ" }}
  minSize: {{ getenv "NODE_MIN_SIZE_PER_AZ" "1" }}
  role: Node
  subnets:
  - {{ . }}
{{- end }}

{{- else }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ getenv "KOPS_CLUSTER_NAME" }}
  name: nodes
spec:
  detailedInstanceMonitoring: {{ getenv "KOPS_CLOUDWATCH_DETAILED_MONITORING" "false" }}
  associatePublicIp: false
  {{- if bool (getenv "KOPS_CLUSTER_AUTOSCALER_ENABLED" "false") }}
  cloudLabels:
    k8s.io/cluster-autoscaler/enabled: "true"
    k8s.io/cluster-autoscaler/{{ getenv "KOPS_CLUSTER_NAME" }}: "owned"
  {{- end }}
  nodeLabels:
    instanceGroup: nodes
  image: {{ getenv "KOPS_BASE_IMAGE" }}
  machineType: {{ getenv "NODE_MACHINE_TYPE" }}
  maxSize: {{ getenv "NODE_MAX_SIZE" }}
  minSize: {{ getenv "NODE_MIN_SIZE" }}
  role: Node
  subnets:
  {{- range (getenv "KOPS_NODES_AVAILABILITY_ZONES" ( getenv "KOPS_AVAILABILITY_ZONES" ) | strings.Split ",") }}
  - {{ . }}
  {{- end }}
{{- end }}

{{/* Allow the manifest to be extended via a datasource */}}
{{- if (datasourceExists "extensions") -}}
---
{{ include "extensions" }}
{{- end -}}
